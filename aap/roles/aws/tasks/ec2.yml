---
- name: Create Key for EC2
  amazon.aws.ec2_key:
    region: "{{ aws_region }}"
    name: "{{ env }}_key"
    key_material: "{{ key_material }}"
    state: "{{ state }}"

- amazon.aws.ec2_vpc_net_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ env_vpc }}"
  register: vpc_name

- amazon.aws.ec2_vpc_subnet_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Env": "{{ env }}"
  register: provisioned_subnets_results

- amazon.aws.ec2_security_group_info:
    region: "{{ aws_region }}"
    filters:
      group-name: "{{ security_groups | map(attribute='name') }}"
  register: provisioned_security_groups_results

- name: Gather Red Hat images
  amazon.aws.ec2_ami_info:
    region: "{{ aws_region }}"
    owners: 309956199498
    filters:
      name: 'RHEL-*'
      architecture: x86_64
  register: rhel_amis_results

- set_fact:
    prov_subnets: "{{ provisioned_subnets_results.subnets }}"
    prov_sec_group: "{{ provisioned_security_groups_results.security_groups }}" 
    rhel_amis: "{{ rhel_amis_results.images }}"
    cacheable: yes

- set_fact:
    subnet_ids: "{{ dict(prov_subnets | map(attribute='tags.Name') | zip(prov_subnets | map(attribute='subnet_id'))) }}"
    security_group_ids: "{{ dict(prov_sec_group | map(attribute='group_name') | zip(prov_sec_group | map(attribute='group_id'))) }}"
    rhel_8_2: "{{ (rhel_amis | selectattr('name', 'match', '.*8.2.*') | rejectattr('name', 'match', '.*BETA.*') | sort(attribute='creation_date') | last).image_id }}"
    rhel_8_4: "{{ (rhel_amis | selectattr('name', 'match', '.*8.4.*') | rejectattr('name', 'match', '.*BETA.*') | sort(attribute='creation_date') | last).image_id }}"
    rhel_8_5: "{{ (rhel_amis | selectattr('name', 'match', '.*8.5.*') | rejectattr('name', 'match', '.*BETA.*') | sort(attribute='creation_date') | last).image_id }}"
    rhel_8_6: "{{ (rhel_amis | selectattr('name', 'match', '.*8.6.*') | rejectattr('name', 'match', '.*BETA.*') | sort(attribute='creation_date') | last).image_id }}"
    rhel_8_7: "{{ (rhel_amis | selectattr('name', 'match', '.*8.7.*') | rejectattr('name', 'match', '.*BETA.*') | sort(attribute='creation_date') | last).image_id }}"
    rhel_9_0: "{{ (rhel_amis | selectattr('name', 'match', '.*9.0.*') | rejectattr('name', 'match', '.*BETA.*') | sort(attribute='creation_date') | last).image_id }}"
    rhel_9_1: "{{ (rhel_amis | selectattr('name', 'match', '.*9.1.*') | rejectattr('name', 'match', '.*BETA.*') | sort(attribute='creation_date') | last).image_id }}"
    cacheable: yes

- name: Create/Destroy instance with EBS volume
  amazon.aws.ec2_instance:
    name: "{{ item.name }}"
    state: running
    image:
      id: "{{ lookup('ansible.builtin.vars', item.image_name) }}"
    vpc_subnet_id:  "{{ subnet_ids[item.vpc_subnet] }}"
    instance_type: "{{ item.instance_type }}"
    key_name: "{{ env }}_key"
    user_data: "{{ item.user_data | default(omit) }}" 
    security_group: "{{ item.security_group }}"
    region: "{{ aws_region }}"
    network:
      assign_public_ip: true
    tags:
      Name: "{{ item.name }}"
      Env: "{{ env }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: "{{ item.volume_size }}"
          delete_on_termination: true 
  register: comp
  when: state == 'present'
  vars:
    instance_state: "{{ (state=='present') | ternary('running', 'absent') }}"
  loop: "{{ instances }}"
#  async: 600
#  poll: 0
#
#- name: Check on EC2 instance creation
#  async_status: 
#    jid: "{{ item.ansible_job_id }}"
#  register: ec2_creation_result
#  until: ec2_creation_result.finished
#  loop: "{{ comp.results }}"
#  retries: 60
#  delay: 10

- name: Destroy instance with EBS volume
  amazon.aws.ec2_instance:
    region: "{{ aws_region }}"
    name: "{{ item.name }}"
    state: absent
  register: comp
  vars:
    instance_state: "{{ (state=='present') | ternary('running', 'absent') }}"
  loop: "{{ instances }}"
  when: state == 'absent'
